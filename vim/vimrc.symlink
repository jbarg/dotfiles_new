set nocompatible              " be iMproved, required
" filetype off                  " required
set nofoldenable

set t_Co=256
" filetype plugin indent on
filetype plugin on
filetype on
let mapleader = "\<Space>"

" Spellcheck
set spelllang=en,de
set complete+=kspell
noremap [z [s
noremap ]z ]s
noremap =z z=

" set clipboard=unnamed
map ; :
set backspace=indent,eol,start
" automatically reload vimrc when it's saved
au BufWritePost .vimrc so ~/.vimrc

" scrolling
set scrolloff=8         " Number of lines from vertical edge to start scrolling
set sidescrolloff=15 " Number of cols from horizontal edge to start scrolling
set sidescroll=1       " Number of cols to scroll at a time



" ---------------------------------------------------------------------------------------------
" Vundle Plugins
" ---------------------------------------------------------------------------------------------
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'




" ---------------------------------------------------------------------------------------------
" git and version control plugins
" ---------------------------------------------------------------------------------------------
Plugin 'tpope/vim-fugitive'
Plugin 'gregsexton/gitv'
Plugin 'junegunn/gv.vim'
Plugin 'int3/vim-extradite'

Plugin 'ryanoasis/vim-devicons'
Plugin 'Xuyuanp/nerdtree-git-plugin'


" ---------------------------------------------------------------------------------------------
" navigation
" ---------------------------------------------------------------------------------------------

Plugin 'scrooloose/nerdtree'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'easymotion/vim-easymotion'
Plugin 'fisadev/dragvisuals.vim'


" ---------------------------------------------------------------------------------------------
" development environment
" ---------------------------------------------------------------------------------------------

Plugin 'Tagbar'
Plugin 'rstacruz/vim-closer'
Plugin 'tpope/vim-commentary' " comment/uncomment lines with gcc or gc in visual mode

" ---------------------------------------------------------------------------------------------
" eye candy
" ---------------------------------------------------------------------------------------------


Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" Themes
Plugin 'chriskempson/base16-vim'
Plugin 'cdmedia/itg_flat_vim'
Plugin 'morhetz/gruvbox'
Plugin 'tyrannicaltoucan/vim-quantum'
Plugin 'jonathanfilip/vim-lucius'
Plugin 'summerfruit256.vim'
Plugin 'NLKNguyen/papercolor-theme'




" ---------------------------------------------------------------------------------------------
" misc
" ---------------------------------------------------------------------------------------------
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'} " for HTML tags
Plugin 'ascenator/L9', {'name': 'newL9'} " vim script libary
Plugin 'benmills/vimux'

Plugin 'terryma/vim-multiple-cursors'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'tpope/vim-surround'

" Making math , average stuff easier, mark stuff in visual mode press ++
Plugin 'nixon/vim-vmath'

" Text completion
Bundle 'Valloric/YouCompleteMe'
Plugin 'unterzicht/vim-virtualenv'

" Snippets
Plugin 'SirVer/ultisnips'
" Snippets are separated from the engine. Add this if you want them:
Plugin 'honza/vim-snippets'
Plugin 'Syntastic'

" Plugin 'blueyed/vim-diminactive'
Plugin 'mbbill/undotree'

Plugin 'kien/rainbow_parentheses.vim'

" Pair Programming
Plugin 'FredKSchott/CoVim'

" Markdown
Plugin 'vim-pandoc/vim-pandoc'
Plugin 'vim-pandoc/vim-pandoc-syntax'

" python
Plugin 'vim-python/python-syntax'

" vim dictionary, prosa
Plugin 'reedes/vim-lexical'

" solidity ethereum
Plugin 'ethereum/vim-solidity'

" Distraction free
Plugin 'junegunn/goyo.vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:

if $TMUX == ''
    set clipboard+=unnamed
endif


" ---------------------------------------------------------------------------------------------
" Make shit pretty, look & feel
" ---------------------------------------------------------------------------------------------
syntax on
"let base16colorspace=256
" colorscheme gruvbox
colorscheme PaperColor
"colorscheme quantum
" set background=dark
set background=light
set nocompatible
let python_highlight_all=1
let g:python_highlight_all=1


" Add line numbers
set number
set cursorline
set relativenumber

" set encoding
set encoding=utf-8

" faster redrawing
set ttyfast
set wrap
set linebreak


" Whitespace stuff
" set nowrap
set tabstop=3
set shiftwidth=3
set softtabstop=3
set expandtab
set showbreak=↳
" autoload files when changed externally
set autoread




set nolist  " list disables linebreak
" Code fold?!
"collapse and fold
"nnoremap <space> za
" Setting a vertical ruler at char x
" set colorcolumn=85

" ---------------------------------------------------------------------------------------------
" General Keybindungs
" ---------------------------------------------------------------------------------------------

" build in autocompletion
map <leader>n <C-X><C-K>

" remove crapy help
inoremap <F1> <nop>
nnoremap <F1> <nop>
vnoremap <F1> <nop>

" turn off normal arrow keys, gotta force those n000bs that copy my dotfiles
noremap <Up> <nop>
noremap <Down> <nop>
noremap <Left> <nop>
noremap <Right> <nop>
inoremap  <Up>     <nop>
inoremap  <Down>   <nop>
inoremap  <Left>   <nop>
inoremap  <Right>  <nop>


" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv


" Drag current lines
noremap <A-j> :m+<CR>
noremap <A-k> :m-2<CR>
inoremap <A-j> <Esc>:m+<CR>
inoremap <A-k> <Esc>:m-2<CR>
vnoremap <A-j> :m'>+<CR>gv
vnoremap <A-k> :m-2<CR>gv


" Keymaping for dragvisual
vmap <expr> H DVB_Drag('left')
vmap <expr> J DVB_Drag('down')
vmap <expr> K DVB_Drag('up')
vmap <expr> L DVB_Drag('right')
vmap <expr> D DVB_Duplicate()

" Switch between splits
map <silent> <S-Right> <c-w>l
map <silent> <S-Left> <c-w>h
map <silent> <S-Up> <c-w>k
map <silent> <S-Down> <c-w>j


nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

map <leader>b gn

noremap <silent> + :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> - :exe "resize " . (winheight(0) * 2/3)<CR>

" use ctags for tag integration
" TODO: maybe i should not use this and use ycm?
command! MakeTags !ctags -R .
" use ^] to jump to tag
" use g^] for ambiguous tags
" use ^t to jump back up the tag stack

" next buffer
map gn :bn<cr>
map gp :bp<cr>
map gd :bd<cr>


" Fix annoying typo's of WQ, QA and Q
command! WQ wq
command! Wq wq

command! W w
command! Q q

command! QA qa
command! Qa qa
command! Bufmacro bufdo execute "normal @a" | write

" Wrapped lines goes down/up to next row, rather than next line in file.
noremap j gj
noremap k gk

" use up and dow arrow to move line
" noremap <up> ddkP
" noremap <down> ddp


" ---------------------------------------------------------------------------------------------
" code folding shit
" ---------------------------------------------------------------------------------------------
" Code folding options
" autocmd Syntax c,cpp,vim,xml,html,xhtml setlocal foldmethod=syntax
" autocmd FileType python setlocal foldmethod=syntax


nnoremap <leader>f0 :set foldlevel=0<CR>
nnoremap <leader>f1 :set foldlevel=1<CR>
nnoremap <leader>f2 :set foldlevel=2<CR>
nnoremap <leader>f3 :set foldlevel=3<CR>
nnoremap <leader>f4 :set foldlevel=4<CR>
nnoremap <leader>f5 :set foldlevel=5<CR>
nnoremap <leader>f6 :set foldlevel=6<CR>
nnoremap <leader>f7 :set foldlevel=7<CR>
nnoremap <leader>f8 :set foldlevel=8<CR>
nnoremap <leader>f9 :set foldlevel=9<CR>

" Code folding doc
" zf#j creates a fold from the cursor down # lines.
" zf/string creates a fold from the cursor to string.
" zj moves the cursor to the next fold.
" zk moves the cursor to the previous fold.
" zo opens a fold at the cursor.
" zO opens all folds at the cursor.
" zm increases the foldlevel by one.
" zc will close one fold
" zM closes all open folds.
" zr decreases the foldlevel by one.
" zR decreases the foldlevel to zero -- all folds will be open.
" zd deletes the fold at the cursor.
" zE deletes all folds.
" [z move to start of open fold.
" ]z move to end of open fold.

" saving folds
augroup AutoSaveFolds
autocmd!
   autocmd BufWinLeave * mkview
   autocmd BufWinEnter * silent loadview
augroup END



"Ranger mapping
nnoremap <leader>fe :call Ranger()<CR>

"awesomeness make jj in insertmode escape to normal. never press <esc> again!
inoremap jj <Esc>


"I really hate that things don't auto-center
nnoremap G Gzz
nnoremap n nzz
nnoremap N Nzz
nnoremap } }zz
nnoremap { {zz


"retab everything
 noremap <leader>rt :set expandtab<CR>:retab<CR>

" Just to beginning and end of lines easier. From http://vimbits.com/bits/16
noremap H ^
noremap L $


" select all
map <Leader>a ggVG

" open last buffer
noremap <Leader><Leader> <C-^>

" nnoremap <C-m> :MaximizerToggle<CR>
nnoremap <leader>hl :set hlsearch!<CR>

" close buffer with leader-q
" and safe & close buffer with leader-wq
nnoremap <leader>q :bd<CR>
nnoremap <leader>wq :w<CR>:bd<CR>

" configure search
set hlsearch
" nnoremap <CR> :nohlsearch<CR><CR>
noremap <F3> :set hlsearch! hlsearch?<CR>


" clear search highlight
noremap <silent><Leader>/ :nohls<CR>

" NerdTree Settings
map <F2> :NERDTreeToggle<CR>
map <silent> <C-F2> :NERDTree<CR><C-w>p:NERDTreeFind<CR>
" autocmd BufEnter * lcd %:p:h

" nicer incrementration
nnoremap + <C-a>
nnoremap - <C-x>



" remap Undo
nnoremap U <C-r>
nnoremap <F1> :UndotreeToggle<cr>


if has("persistent_undo")
    set undodir=~/.undodir/
    set undofile
endif



" only show cursorline in current window
autocmd WinLeave * set nocursorline
autocmd WinEnter * set cursorline



" ---------------------------------------------------------------------------------------------
" GIT TIG version control git
" ---------------------------------------------------------------------------------------------
" nnoremap <Leader>gv :Gitv --all<CR>
command! Ghistory Gitv! --all
let g:Gitv_DoNotMapCtrlKey=1
" Manual for gitv

" This is a list of key mappings that will work only in the gitv browser window.
" Where appropriate the differences in action is described for the two gitv
" modes.

"     Mode        Map     Description~

"     normal      <cr>      Opens a commit. In browser mode this will show the
"                           commit header information including the commit
"                           message. It will also display a full diff showing all the
"                           changes to files.

"                           Tip: if you press <cr> on anything sensible you can
"                           view the expected output. For example pressing <cr> on
"                           the line beginning a file diff, it will display the
"                           diff using Vim's built in diff viewing capability.
"                           Pressing <cr> on the tree sha will list all the files
"                           in the commit and pressing <cr> on one of these will
"                           show that file as it was in the commit. And so on.

"                           Pressing <cr> on the line "-- Load More --" will load
"                           |g:Gitv_CommitStep| more commits.

"                           In file mode this will open the focused file as it was
"                           in the currently selected diff. This allows you to
"                           easily go back in time and look at the focused file.

"                           Pressing <cr> on the top line in file mode opens the
"                           current working copy of the focused file.

"     normal      <c-n>     In either browser or file mode, this moves down to
"                 J         the next commit and opens it. This allows you to
"                           quickly move from commit to commit and view either
"                           the commit details or the file itself, depending on
"                           the mode, in one action.

"     normal      <c-p>     The same as <c-n> but move back a commit.
"                 K

"     normal      o         The same as <cr> but opens in a new |split|.
"                 <c-j>

"     normal      O         The same as <cr> but opens in a new |tab|.
"                 <c-l>

"     normal      s         The same as <cr> but opens in a new |vsplit|.
"                 <c-k>

"     normal      gw         Switch between the preview window and browser.

"     normal      i         This performs the same thing as <cr> in browser mode.
"                 <c-cr>    In file mode it opens the commit details rather than
"                           the focused file. (NOTE: many terminal emulators do
"                           not support <c-cr>).

"     normal      q         Quits gitv. In browser mode this will close the entire
"                           tab. In file mode this closes only the |preview-window|.
"                           Note: in browser mode this will close the tab
"                           regardless of any windows you may have opened as well
"                           as the gitv windows.

"     normal      a         Switches the '--all' argument and updates the browser
"                           window.

"     normal      u         Forces an update of the content of the browser window.

"     normal      co        Performs a 'git checkout' of the commit the cursor is
"                           on. In both modes this will present you with a choice
"                           of whether you would like to checkout the sha or any
"                           ref that might point to this commit.

"                           File mode differs in that it doesn't check out the
"                           entire commit but just the focused file in that
"                           commit.

"                           Tip: in gVim this will present you with a pop up dialog.
"                           You can make this a text choice by performing ':set
"                           guioptions+=c.'

"     normal      D         Performs a diff using Vim's built in diff viewing
"                           capabilities. This does nothing in browser mode. In
"                           file mode it will diff the current file with the
"                           focused file in the commit under the cursor.

"     visual      D         In visual mode this performs a diff against the file
"                           in the commit at the top of the selection against the
"                           file in the commit at the bottom of the selection. The
"                           newest file is always on the right.

"     normal      S         Open a diffstat of everything that has changed since
"                           the commit under the cursor, in both browse and
"                           normal mode.

"     visual      S         In visual mode this works in exactly the same way as
"                           normal mode. However, it only shows what has changed
"                           in the range of commits that are highlighted.

"     visual      m         Merges the commit in either the top or bottom line of
"                           the selection into the commit specified by the other
"                           end of the selection. This uses prompts to guide you
"                           through the merge process and should be fairly
"                           intuitive. By default, it will also ask for
"                           confirmation if you wish to perform a fast-forward
"                           merge or not. If you have defined g:Gitv_MergeArgs,
"                           you will not be prompted to fast forward.

"                           gitv does not allow you to merge arbitrary commits.
"                           The lines at the top and bottom of the selection
"                           must contain refs in the form of tags, remotes or
"                           local branches.

"     visual      cp        Cherry-Picks the selected commits to the active
"                           branch.

"     normal      cp        Same as visual cp

"     visual      rb        Reset (mixed) the active branch to the top of the
"                           selected commits.

"     normal      rb        Same as visual rb

"     visual      rbs       Reset (soft) the active branch to the top of the
"                           selected commits.

"     normal      rbs       Same as visual rbs

"     visual      rbh       Reset (hard) the active branch to the top of the
"                           selected commits.

"     normal      rbh       Same as visual rbh

"     normal      rev       Revert the commit. If the commit is a merge, selects
"                           the first parent for reverting to.

"     visual      rev       Same as rev, but revert a range of commits. If a
"                           merge is within the range, fails by necessity.

"     visual      d         Delete a branch or tag on the selected line. You will
"                           be asked which branch/tag to use.

"     normal      d         Same as visual d

"     normal      <leader>m Merges the first ref found on the current line in to
"                           the branch currently pointed to by HEAD. By default,
"                           this will prompt you if you wish to use a fast-forward
"                           merge. If you have defined g:Gitv_MergeArgs, you
"                           will not be prompted to fast forward.

"     normal      git       Enters command mode with ":Git " already typed for
"                           you. Just a convenient shortcut for executing git
"                           commands and watching them affect the repository.

"     normal      yc        Copy the sha on the current line in either mode.
"                           This also copies it to the '+' register so that it
"                           can be pasted externally. If there is no commit on
"                           the current line the behaviour (although harmless)
"                           is undefined.





" ---------------------------------------------------------------------------------------------
" NERDTree git indicators
" ---------------------------------------------------------------------------------------------
let g:tig_executable = 'tig'
let g:tig_default_command = 'status'
" let g:tig_on_exit = 'bw!'

let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }


" ---------------------------------------------------------------------------------------------
" YouCompleteMe
" ---------------------------------------------------------------------------------------------
let g:ycm_autoclose_preview_window_after_completion=1
nnoremap <leader>g :YcmCompleter GoToDefinitionElseDeclaration<CR>
" Super Nice YouCompleteMe IDE shit
nnoremap <leader>x :YcmCompleter GoToReferences<CR>
nnoremap <leader>s :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>d :YcmCompleter GetDoc<CR>

" Settings for integration with Airline
let g:ycm_error_symbol = '!!'
let g:ycm_warning_symbol = '>>'

" Additional autocomplete settings
let g:ycm_complete_in_comments = 0
let g:ycm_complete_in_strings = 1





" ---------------------------------------------------------------------------------------------
" lexical dictionary
" ---------------------------------------------------------------------------------------------
augroup lexical
  autocmd!
  autocmd FileType markdown,mkd call lexical#init()
  autocmd FileType textile call lexical#init()
  autocmd FileType text call lexical#init({ 'spell': 0 })
augroup END
let g:lexical#spelllang = ['en_us','de_de',]

let g:lexical#thesaurus = ['~/.dotfiles/lexical/words.txt',]
let g:lexical#thesaurus_key = '<leader>t'
let g:lexical#dictionary_key = '<leader>k'

"
"Spell-check
"
"These are the Normal mode commands:
"
"]s   - Move to next misspelled word after the cursor.
"[s   - Like ]s but search backwards
"]S   - Like ]s but only stop at bad words, not at rare words or words for
"another region.
"[S   - Like ]S but search backwards.
"With the following key mappings you can use Visual mode selection to select
"the characters (including whitespace). Otherwise the word under the cursor is
"used.
"
"zg   - Mark as a good word
"
"zw   - Like zg but mark the word as a wrong (bad) word.
"
"zug - Unmark as good word
"
"zuw - Unmark as wrong (bad) word
"
"z=   - For the word under/after the cursor suggest correctly spelled words
"
"1z=  - Use the first suggestion, without prompting
"
". - Redo - repeat last word replacement
"
":spellr - Repeat the replacement done by z= for all matches with the replaced
"word in the current window

" -------------------------------------------------------------------------------------------
" UltiSnips Snippets
" ---------------------------------------------------------------------------------------------
let g:UltiSnipsExpandTrigger="<C-Space>"
let g:UltiSnipsJumpForwardTrigger="<c-n>"
let g:UltiSnipsJumpBackwardTrigger="<c-p>"




" ---------------------------------------------------------------------------------------------
" awesome vim functions
" ---------------------------------------------------------------------------------------------

" Show trailing spaces and highlight hard tabs
set list listchars=tab:»·,trail:·

" Strip trailing whitespaces on each save
fun! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

" remember line
if has("autocmd")
     au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
  endif


" ---------------------------------------------------------------------------------------------
" Airline Config
" ---------------------------------------------------------------------------------------------
let g:airline_powerline_fonts = 1
let g:Powerline_symbols = 'fancy'
"set guifont=Sauce\ Code\ Powerline\ Semibold:h11
set guifont=Source\ Code\ Pro\ for\ Powerline:h11
"  set guifont=Fira\ Mono:h11
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_alt_sep = '|'
set fillchars+=stl:\ ,stlnc:\
set laststatus=2
set ttimeoutlen=50
let g:airline_theme='base16'
let g:airline_theme='papercolor'
" let g:airline_theme='lucius'

let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]
let g:rbpt_max = 16


"let g:rbpt_loadcmd_toggle = 0
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
" ctrl p should ignore useless files
let ctrlp_filter_greps = "".
    \ "egrep -iv '\\.(" .
    \ "jar|class|pdf|swp|swo|log|so|o|pyc|jpe?g|png|gif|mo|po" .
    \ ")$' | " .
    \ "egrep -v '^(\\./)?(" .
    \ "deploy/|lib/|classes/|libs/|deploy/vendor/|.git/|.hg/|.svn/|.*migrations/" .
    \ ")'"

let my_ctrlp_git_command = "" .
    \ "cd %s && git ls-files | " .
    \ ctrlp_filter_greps

if has("unix")
    let my_ctrlp_user_command = "" .
    \ "find %s '(' -type f -or -type l ')' -maxdepth 15 -not -path '*/\\.*/*' | " .
    \ ctrlp_filter_greps
endif

let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_user_command = ['.git/', my_ctrlp_git_command, my_ctrlp_user_command]

nmap <F8> :TagbarToggle<CR>

" Use vim as hexeditor
augroup Binary
  au!
  au BufReadPre  *.bin let &bin=1
  au BufReadPost *.bin if &bin | %!xxd
  au BufReadPost *.bin set ft=xxd | endif
  au BufWritePre *.bin if &bin | %!xxd -r
  au BufWritePre *.bin endif
  au BufWritePost *.bin if &bin | %!xxd
  au BufWritePost *.bin set nomod | endif
augroup END




" Use ranger as vim file manager

fun! Ranger()
  let tmpfile = tempname()
  if a:0 > 0 && a:1 != ""
    let dir = a:1
  elseif expand("%")
    let dir = "."
  else
    let dir = expand("%:p:h")
  endif

  exe 'silent !ranger --choosefile='.tmpfile dir
  if filereadable(tmpfile)
    exe 'edit' readfile(tmpfile)[0]
    call delete(tmpfile)
  endif
  redraw!

  let result = 0
  if filereadable(tmpfile)
      silent let result = system('cat '. tmpfile)
  endif
  silent call system('rm -rf ' . tmpfile)
  return result
endfun

" Syntastic Syntax Check
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_loc_list_height=3
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_python_python_exec = '/usr/bin/python2.7'


" Multi Cursor
" Default mapping
let g:multi_cursor_quit_key='<Esc>'

" Map start key separately from next key
let g:multi_cursor_start_key='<F6>'
let g:multi_cursor_start_key='<C-n>'
let g:multi_cursor_start_word_key='g<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'

let g:EasyMotion_do_mapping = 0 " Disable default mappings
" " Turn on case insensitive feature
let g:EasyMotion_smartcase = 1
nmap <C-f> <Plug>(easymotion-overwin-f)

map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)

 " These `n` & `N` mappings are options. You do not have to map `n` & `N` to
 " Without these mappings, `n` & `N` works fine. (These mappings just provide
 " different highlight method and have some other features )
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)")

" Stop highlighting after search with esc
nnoremap <esc> :noh<return><esc>
nnoremap <esc>^[ <esc>^[] ]

